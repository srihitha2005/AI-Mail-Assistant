The system consists of three main layers working together. At the backend, a Python service connects to Gmail using IMAP, retrieves recent emails, cleans the content, and filters them by keywords. For each email, it uses Google Gemini to classify sentiment, detect urgency, assign a high-level label, and generate a suggested draft response. The processed email objects are stored in a JSON file inside the static directory, acting as a lightweight database.
A Flask server handles orchestration. On each page load, it executes the extraction script to refresh the JSON with the latest emails, then serves both the React frontend and the JSON file through static routes. This keeps the data updated without needing a full database or API complexity.
On the frontend, a React-based dashboard consumes the JSON data. It provides two main views: an inbox that sorts emails by urgency, read-status, and recency, and an analytics dashboard with distribution charts using Chart.js. Each email item displays its sender, subject, sentiment, urgency, and Request, with a detailed view showing the cleaned body, classification, and metrics. Users can mark emails as answered or unread and directly insert or edit the AI-generated draft response into a text area.
